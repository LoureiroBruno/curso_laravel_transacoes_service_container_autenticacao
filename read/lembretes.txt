================================================================================================================================================================================
mod 01

# Aprendemos a usar transações usando Laravel
# Vimos que há mais de uma sintaxe para trabalhar com transações

-----------------------------------------------------------------------------------------------------------------------------------


## bulk insert, para inserirmos vários dados de uma vez só em uma única query (consulta). 
## par resolver problemas de inconsistência é através de transações $pdo->beginTrasaction() e $pdo->commit(), é utilizando as facades DB, DB::transaction()
Essa função espera por parâmetro uma closure, função anônima e tudo que inserimos nela vai ocorrer dentro de uma transação, isto é, se fizermos um insert, um delete, um update, 
tudo isso vai estar dentro de uma única transação. 

public function store(SeriesFormRequest $request)
{
    DB::transaction(function () {

    });
}

## facade de DB usamos a função transaction() e ela possui algumas particularidades. 
## A primeira, é que ela recebe, além dessa closure, um segundo parâmetro, quando trabalhamos com transações pode ocorrer deadlock, isto é, se uma transação depende de duas tabelas e 
outra transação depende de outras duas tabelas, só que uma delas é igual. 
Por exemplo, a primeira transação depende da tabela de episódios, a segunda transação usa a de episódios mas depende da de temporadas que a primeira transação ainda está dependendo. 
Basicamente, é como se você perguntasse para a sua mãe, se você pode sair e ela responde para você verificar com o seu pai, e ao perguntar para o pai, ele informa para você verificar com a mãe. 
Isso é um deadlock e quando trabalhamos com transações, isso pode acontecer.
Então podemos informar para o Laravel tentar executar novamente essa transação em caso de deadlock, por exemplo, se quisermos tentar cinco vezes se houver deadlock, basta passarmos o 
parâmetro cinco Episode::insert($episodes); }, attempts:5);.

## A segunda, Não precisamos iniciar a variável serie em um estado inválido, passar por referência, &$serie, etc.
pós o Episode::insert($episodes); vamos digitar return $serie;
Agora o que a função transaction() vai fazer é pegar o retorno de toda a função
pegar o retorno da série incluindo $serie = antes de DB::transaction(function () use ($request), isto é, temos as séries em mãos e podemos acessar o nome dela.

$serie = DB::transaction(function () use ($request)

public function store(SeriesFormRequestCreate $request)
{
    /** obtém o return $series */
    $serie = DB::transaction(function () use ($request){
        
        $serie = Series::create($request->all());

        $seasons = [];
        for ($s=1; $s <= $request->seasonQty; $s++) {
            $seasons[] = [
                'series_id' => $serie->id,
                'number' => $s,
                'created_at' => $serie->created_at,
                'updated_at' => $serie->updated_at
            ];
        }

        /** bulk insert */
        Season::insert($seasons);

        $episodes = [];
        foreach ($serie->seasons as $season) {
            for ($e=1; $e <= $request->episodesPerSeason; $e++) {
                $episodes[] = [
                    'season_id' => $season->id,
                    'number' => $s,
                ];
            }
        }

            /** bulk insert */
        Episode::insert($episodes);

        return $serie;
    });

    return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");
}

## só que em caso de erro precisaríamos após o public function store(SeriesFormRequest $request) inserir um try{ e fechar as chaves só depois de return $serie;}); 
e tentar retornar essa resposta, só que em caso de erro, no cenário de um catch, se pegarmos uma exceção qualquer queremos garantir que seja exibido um erro.
Isso é um cenário comum, só que no nosso caso, com esse código vamos ter um nível de indentação, depois outro nível de indentação, assim, o código deixa de ser tão interessante. 
Se você fez o treinamento de object calisthenics já sabe que é interessante diminuirmos o número de indentações. 
public function store(SeriesFormRequestCreate $request)
{
    try {
        /** obtém o return $series */
        $serie = DB::transaction(function () use ($request){
        
            $serie = Series::create($request->all());
    
            $seasons = [];
            for ($s=1; $s <= $request->seasonQty; $s++) {
                $seasons[] = [
                    'series_id' => $serie->id,
                    'number' => $s,
                    'created_at' => $serie->created_at,
                    'updated_at' => $serie->updated_at
                ];
            }
    
            /** bulk insert */
            Season::insert($seasons);
    
            $episodes = [];
            foreach ($serie->seasons as $season) {
                for ($e=1; $e <= $request->episodesPerSeason; $e++) {
                    $episodes[] = [
                        'season_id' => $season->id,
                        'number' => $s,
                    ];
                }
            }
    
                /** bulk insert */
            Episode::insert($episodes);

            return $serie;
        });

        return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");

    } catch (\Throwable $th) {
        // exceção
    }
}

## usar uma sintaxe alternativa
ao invés de utilizar o transaction() usarmos o DB::beginTransaction();, assim, podemos remover a função anônima $serie = DB::transaction(function () use ($requestt) e a 
closure return $serie; e todo o código passa a estar no mesmo escopo que estava antes.
Apenas inserimos a linha DB::beginTransaction(); e no final DB::commit();. E agora, caso queiramos tratar aquele erro, podemos fazer o try catch e no catch adicionar o rollback. 
Igual fazemos com o PDO, então os métodos que conseguimos acessar no PDO, conseguimos acessar em DB.

public function store(SeriesFormRequestCreate $request)
{
    /** inicia a transação */
    DB::beginTransaction();
    $serie = Series::create($request->all());

    $seasons = [];
    for ($s=1; $s <= $request->seasonQty; $s++) {
        $seasons[] = [
            'series_id' => $serie->id,
            'number' => $s,
            'created_at' => $serie->created_at,
            'updated_at' => $serie->updated_at
        ];
    }

    /** bulk insert */
    Season::insert($seasons);

    $episodes = [];
    foreach ($serie->seasons as $season) {
        for ($e=1; $e <= $request->episodesPerSeason; $e++) {
            $episodes[] = [
                'season_id' => $season->id,
                'number' => $s,
            ];
        }
    }

    /** bulk insert */
    Episode::insert($episodes);
    /** finaliza a transação com sucesso */
    DB::commit();
    
    return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");

    DB::rollBack();
}
**  DB::beginTransaction()irá apenas iniciar uma transação, enquanto para DB::transaction()você deve passar uma função Closure que será executada dentro de uma

** anotação
$serie = DB::transaction(function () use ($request){
    
    $serie = Series::create($request->all());

    $seasons = [];
    for ($s=1; $s <= $request->seasonQty; $s++) {
        $seasons[] = [
            'series_id' => $serie->id,
            'number' => $s,
            'created_at' => $serie->created_at,
            'updated_at' => $serie->updated_at
        ];
    }

    /** bulk insert */
    Season::insert($seasons);

    $episodes = [];
    foreach ($serie->seasons as $season) {
        for ($e=1; $e <= $request->episodesPerSeason; $e++) {
            $episodes[] = [
                'season_id' => $season->id,
                'number' => $s,
            ];
        }
    }

        /** bulk insert */
    Episode::insert($episodes);

    return $serie;
});

return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");

** anotação try

public function store(SeriesFormRequestCreate $request)
{
    /** inicia a transação */
    DB::beginTransaction();
    try {
        $serie = Series::create($request->all());

        $seasons = [];
        for ($s=1; $s <= $request->seasonQty; $s++) {
            $seasons[] = [
                'series_id' => $serie->id,
                'number' => $s,
                'created_at' => $serie->created_at,
                'updated_at' => $serie->updated_at
            ];
        }

        /** bulk insert */
        Season::insert($seasons);

        $episodes = [];
        foreach ($serie->seasons as $season) {
            for ($e=1; $e <= $request->episodesPerSeason; $e++) {
                $episodes[] = [
                    'season_id' => $season->id,
                    'number' => $s,
                ];
            }
        }

        /** bulk insert */
        Episode::insert($episodes);
        /** finaliza a transação com sucesso */
        DB::commit();
        return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");

    } catch (\RuntimeException $serie) {
        DB::rollBack();
        return to_route('series.index')->with("Danger", "Erro ao cadastar a série: '{$serie->nome}' com falha transação");
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
================================================================================================================================================================================
mod 02

# Separamos o código que lida com banco de dados em uma classe especializada nisso
# Criamos uma interface e a implementamos nesta nova classe
# Aprendemos a lidar com injeção de dependência no Laravel usando o service container
# Criamos nosso primeiro service provider

-----------------------------------------------------------------------------------------------------------------------------------

------
02
------

## agora é separar uma classe específica para lidar com o banco de dados, Na pasta app ao invés de inserir dentro da pasta "Http", criar uma nova classe dentro da pasta Repositories
com namespace que vamos nomear de SeriesRepository.
Isso significa que vai ser uma classe que vai lidar com os detalhes de banco de dados, então, toda responsabilidade de tratar detalhes do banco de dados pode ser inserido nessa classe.

<?php

namespace App\Repositories;

class SeriesRepository
{

}

criando uma classe nova que vai estar no namespace novo que criamos chamado "Repositories", logo, essa classe é uma classe de repositório.
significa que vai ser uma classe que vai lidar com os detalhes de banco de dados, então, toda responsabilidade de tratar detalhes do banco de dados pode ser inserido nessa classe.
Como estamos usando o Eloquente não vamos precisar receber pelo construtor uma conexão com o PDO, por exemplo, é possível usar apenas o Eloquente. 
Parte do código para extrair em SeriesController.php
E no arquivo SeriesRepository.php vamos chamar esse método de add e receber o SeriesFormRequest por parâmetro, depois pensamos em como melhorar isso.

class SeriesRepository
{
    public function add(SeriesFormRequestCreate $request): Series
    {
        return DB::transaction(function () use ($request) {
       
            $serie = Series::create($request->all());

            $seasons = [];
            for ($s=1; $s <= $request->seasonQty; $s++) {
                $seasons[] = [
                    'series_id' => $serie->id,
                    'number' => $s,
                    'created_at' => $serie->created_at,
                    'updated_at' => $serie->updated_at
                ];
            }

            /** bulk insert */
            Season::insert($seasons);

            $episodes = [];
            foreach ($serie->seasons as $season) {
                for ($e=1; $e <= $request->episodesPerSeason; $e++) {
                    $episodes[] = [
                        'season_id' => $season->id,
                        'number' => $s,
                    ];
                }
            }

            /** bulk insert */
            Episode::insert($episodes);

            return $serie;
        });

    }
}

diferente da ultima alteração do controler SeriesController no metodo Create

public function store(SeriesFormRequestCreate $request)
{
    /** inicia a transação */
    DB::beginTransaction();
    try {
        $serie = Series::create($request->all());

        $seasons = [];
        for ($s=1; $s <= $request->seasonQty; $s++) {
            $seasons[] = [
                'series_id' => $serie->id,
                'number' => $s,
                'created_at' => $serie->created_at,
                'updated_at' => $serie->updated_at
            ];
        }

        /** bulk insert */
        Season::insert($seasons);

        $episodes = [];
        foreach ($serie->seasons as $season) {
            for ($e=1; $e <= $request->episodesPerSeason; $e++) {
                $episodes[] = [
                    'season_id' => $season->id,
                    'number' => $s,
                ];
            }
        }

        /** bulk insert */
        Episode::insert($episodes);
        /** finaliza a transação com sucesso */
        DB::commit();
        return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");

    } catch (\RuntimeException $serie) {
        DB::rollBack();
        return to_route('series.index')->with("Danger", "Erro ao cadastar a série: '{$serie->nome}' com falha transação");
    }
}


## agora Se estamos adicionando essa série no banco de dados com todas as suas temporadas, episódios e retornando ela dentro da nova Calsse SeriesRepository,
no controller em SeriesController.php podemos remover a parte do código que colamos no repositório e usar somente ele para isso. Nós poderíamos fazer um 
new SeriesRepository() mas não vamos fazer dessa forma, vamos utilizar a injeção de dependência, isso significa que vamos solicitar ao Laravel para nos dar esse objeto já criado.

refatorado o metodo store do SeriesController

public function store(SeriesFormRequestCreate $request, SeriesRepository $repository)
{
    $serie = $repository->add($request);

    return to_route('series.index')->with("success", "Cadastrado a série: '{$serie->nome}' com sucesso!");
}

## Se utilizarmos esse repositório em vários métodos, podemos receber no construtor: public function __construtor(){}
public function __construct(private SeriesRepository $repository)
{
    $this->repository = $repository;
}

------
04
------

## Então, no nop 02 já melhoramos o código fazendo com que o controller passe a responsabilidade de adicionar uma série para o repositório de séries , ou seja, para uma classe 
especializada em tratar séries no banco de dados. Assim, já melhoramos o código, o controller está bem mais sucinto e isso é bem interessante.
## Só que temos um problema, estamos recebendo o repositório SeriesRepository, agora imagina que mais para frente não queremos mais utilizar o Eloquente e sim diretamente com o 
PDO ou outro ORM como o Doctrine, por exemplo. Então, teríamos muito mais trabalho da forma como foi implementada. 
# visto que essas discussões são importantes e são bastante citadas em treinamentos mais focados em arquitetura de software e design de código. 
**  no treinamento de PHP e Clean Architecture: descomplicando arquitetura de software
capítulo específico sobre repositórios, aprendemos como lidar com repositórios, em qual camada de uma arquitetura costumam ficar e criamos interfaces para os repositórios. 
Também implementamos com PDO e uma implementação em memória e deixamos um desafio para utilizar o Doctrine

** Esse tipo de separação ajuda bastante quando vamos utilizar o Domain Driven Design, que também temos um curso na Alura, o PHP e Domain Driven Design: apresentando os conceitos 
que é quando queremos ter um domínio mais expressivo de como o código interage com o mundo real. Nesse curso também utilizamos no código os repositórios. 
Então, o fato de usar repositórios no nosso código, está dando uma pequena vantagem de melhoria, mas, quando estudamos mais sobre os padrões e arquiteturas, 
notamos que existem vários outros ganhos. 

## Agora, vamos criar uma nova interface como o nome SeriesRepository e renomear o repositório de SeriesRepository para EloquentSeriesRepository, e essa classe extender de SeriesRepository
assim, caso queria usar o Doctrine ao inves do Eloquent, cria uma nova classe DctrineSeriesRepository e implementando da interface SeriesRepository mas com codigo correspondente do Doctine

## Mas como o Laravel vai saber qual implementação dessa interface ele vai criar? 
o Laravel que sempre que alguém precisar da interface SeriesRepository, por enquanto, entrega a classe EloquentSeriesRepository
Se mais para frente mudarmos de implementação, vamos informar para o Laravel que quando solicitarem a interface SeriesRepository você entrega essa outra classe, e 
todos os códigos que utilizam a interface SeriesRepository não precisam ser modificados. Então, vamos ensinar o Laravel a criar uma instância de algum tipo, no caso uma interface

----------------------------------
06
----------------------------------


## Existe no Laravel o service container (ou em português, Container de Serviço) e a partir dele temos o service provider (ou em português, provedor de serviço)

## Exemplificando, se em SeriesController esperamos uma instância, é o service container que vai analisar o que precisamos e entregar.
Ele cria para nós e injeta, seja no construtor ou em cada uma das ações ao longo do código. Ele que cria o request, qualquer dependência, etc. O service container que permite a injeção de dependência,
contudo, além disso, no Laravel temos o service providers


-- Basicamente queremos informar que quando precisar da interface SeriesRepository é para criar a implementação da classe concreta do EloquentSeriesRepository
1 - php artisan make:provider SeriesRepositoryProvider (criando um provedor de repositório de séries)
2 - configurar dentro da classe SeriesRepositoryProvider

class SeriesRepositoryProvider extends ServiceProvider
{
    /**
     * Register services.
     *
     * @return void
     */
    public function register()
    {
        $this->app->bind(SeriesRepository::class, EloquentSeriesRepository::class);
    }
}

que sempre que precisar de uma instância do tipo SeriesRepository, instancie o EloquentSeriesRepository, o service container sabe o que deve ser feito para isso

obs: mas precisar registar esse provider, pasta config vamos selecionar o arquivo app.php que é a configuração da aplicação, vamos encontrar a chave providers
adicionar o \App\Providers\SeriesRepositoryProvider::class,.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


================================================================================================================================================================================
================================================================================================================================================================================
mod 03

# Praticamos vários conhecimentos ao implementar a funcionalidade de assistir episódios
# Vimos como definir um valor padrão para uma coluna em uma migration
# Conhecemos os métodos each das coleções e push das models do Eloquent
# Utilizamos um escopo para buscar os episódios assistidos, depois otimizamos isso usando as coleções

-----------------------------------------------------------------------------------------------------------------------------------

----------------------------------
04
----------------------------------

## criarem uma nova migration para adicionar uma coluna que permita que na tabela de episódios seja guardado a informação se foi assistido ou não

## php artisan make:migration --table=episodes, já podemos informar para qual tabela estamos criando essa migration que vai ser a episode. 
Só que, é preciso informar também o nome, vamos chamar de "add_watched_apisodes", adicionar a coluna watched de episódio.
# php artisan make:migration --table=episodes add_watched_apisodes
Repare que já temos um Schema::table, esse é o método que usamos quando queremos alterar uma tabela e não criar uma nova e dentro vamos inserir que da tabela queremos adicionar uma coluna do tipo booleano,
$table->boolean(), isto é, verdadeiro ou falso. O nome vai ser watched. 

public function up()
{
    Schema::table('episodes', function (Blueprint $table) {
        $table->boolean('watched')->default(false);
    });
}

default(false), ou seja, ao criar essa coluna já estamos informando para o próprio banco de dados que, por padrão, essa coluna tem um valor falso, o episódio não foi assistido.

Sendo assim, todos os episódios que já estão no banco terão esse valor como falso a partir de agora. Então, vamos criar também a forma de desfazer essa migration que é através de um dropColumn, com isso é removida a coluna watched.

public function down()
{
    Schema::table('episodes', function (Blueprint $table) {
        $table->dropColumn('watched');
    });
}

para que as alterações sejam repassadas ao banco, php artisan migrate para ver se o campo será criado.

----------------------------------
05
----------------------------------

criado a nova rota, Route::post('/seasons/{season}/episodes', [EpisodesController::class, 'update'])->name('episodes.update');
e add um novo metodo update no controllerEpisodes, recebendo por parametro Request $request, Season $season

## O que queremos fazer é pegar os episódios assistidos, watchedEpisodes, que vão estar em request->episodes, pronto, esses são os episódios assistidos, 
$watchedEpisodes = $request->episodes; os que enviamos pelo post. 
A partir desses episódios assistidos queremos marcar a propriedade watched como "true" se o episódio estiver selecionado no array, ou seja, vamos percorrer todos os episódios da temporada, 
$season->episodes, e para cada um deles vamos executar uma função. 
Repare que as collections do Laravel possuem o método each(), que para cada item dessa coleção podemos executar uma função. 
Por parâmetro da função vamos receber o episódio. Recapitulando, para cada um desses episódios da temporada, vamos executar a função, function (Episode $episode){}, que recebe cada um desses 
episódios. Assim, esse episódio vamos marcar como assistido, watched, se o ID desse episódio estiver no array de episódios assistidos watchedEpisodes, que é o array de IDs na aplicação 
que aparece para nós.

public function update(Request $request, Season $season)
{
        $watchedEpisodes = $request->episodes;
        $season->episodes->each(function (Episode $episode) use ($watchedEpisodes) { // visto que essa variável não existe dentro da closure, assim, vamos realizar o uso dela, use ($watchedEpisodes).
        $episode->watched = in_array($episode->id, $watchedEpisodes);
        });
}

 podemos inserir o $season->push();, que pega todos os episódios e salvar, visto que o método push() faz é salvar a model em questão, no caso a $season e todos os seus relacionamentos,
 ntão, como existem alterações nesses relacionamentos, nos episodes, o push vai salvar nos episódios.


public function update(Request $request, Season $season)
{
        $watchedEpisodes = $request->episodes;
        $season->episodes->each(function (Episode $episode) use ($watchedEpisodes) {
        $episode->watched = in_array($episode->id, $watchedEpisodes);
        });
        $season->push();
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
================================================================================================================================================================================
mod 04

# Entendemos o que é e criamos um middleware
# Definimos nossas regras para realizar login
# Criamos o cadastro de usuário
# Implementamos um logout

-----------------------------------------------------------------------------------------------------------------------------------

## r permitir acesso à aplicação somente aos usuários registrados e quando criamos um projeto usando o Laravel, já temos algumas funcionalidades relacionadas ao usuário
No arquivo user.php já temos o fillable o nome, o e-mail e a senha, temos detalhes de campos escondidos em $hidden, os cats que podemos fazer ou seja temos algumas coisas já prontas.

Inclusive, temos também em "database > migrations", migrations já prontas para a tabela de usuários.
Já temos então uma estrutura pronta para trabalharmos com autenticação so rodar o comando migrate

## O que queremos fazer basicamente é que quando formos acessar alguma URL, por exemplo, barra '/', /series, /series/19 ou /seasons, isto é, quando acessar alguma URL, que vamos definir, 
antes de chegar no controller queremos verificar se o usuário da logado ou não
O Laravel possui um sistema de autenticação bastante completo e, por sua vez, complexo, então, conseguimos fazer bastante coisa. Mas, para o que fazer, vamos poder usar novamente as facades, 
ou seja, existem facilidades de autenticação que vamos utilizar. Mas, basicamente o que o Laravel tem para qualquer sistema de autenticação são: os guards (ou em português, guardas), 
sendo uma forma de verificar quem é o usuário e os providers, que é uma maneira de encontrar determinado usuário.

## Os guards definem como esses usuários são autenticados a cada requisição, que é como vamos identificar o usuário. O Laravel, por exemplo, já vem com o guard de session, 
isto é, podemos armazenar um usuário em sessão, que é inclusive dessa forma que faremos, por enquanto.

## E o provider é como o usuário vai ser recuperado de algum lugar, seja de uma API, de um banco de dados, de um arquivo ou da memória. Basicamente é assim que funciona o sistema do Laravel. 
Então, podemos verificar se um usuário está logado ou não antes de executar o código no controller, por exemplo. 

## no exemplo de modo de uso,
Vamos em "app > Http > Controllers > SeriesController.php", na index poderíamos verificar antes de acessar a lista de séries se o usuário está logado e para isso vamos usar o Auth::check(),
repare que o auth vem da importação das facades e o método check() nos retorna um booleano, que vai retornar verdadeiro se tiver algum usuário logado.

exemplo: o usuário vai estar logado se tiver alguma informação salva em sessão e retorna falso se não tiver nenhum usuário logado.

public function index(Request $request)
{
    add(Auth::check()); => exibido falsse neste exemplo
    $series = Series::all();
    $mensagemSucesso = session('mensagem.sucesso');

    return view('series.index')->with('series', $series)->with('mensagemSucesso', $mensagemSucesso);
}


podemos fazer um if, se este usuário está logado, então, vai executar tudo, ou melhor ainda, se o usuário não estiver logado, !Auth::check();, 
podemos lançar uma exceção AuthenticationException() que já tem aqui uma exceção específica de autenticação.

public function index(Request $request)
{
        if (!Auth::check()) {
            throw new AuthenticationException(); => como lançamos uma exceção de autenticação, o Laravel sabe que deve redirecionar o usuário para a rota de login, mas não temos nenhuma rota de login definida. 
        }
        $series = Series::all();
        $mensagemSucesso = session('mensagem.sucesso');

return view('series.index')->with('series', $series)->with('mensagemSucesso', $mensagemSucesso);

}

## para que essa verificação seja essa aplicada a cada controller, repetindo o código, ou usando na verificação dentro do arquivo de rota, podemos usar Middlewares
# php artisan make:middleware Autenticador 

criar um middleware do tipo de autenticação.

## o Middlewares tem a funcionalidade, como um interceptor da requisição que pode tanto transformar a requisição quanto transformar a resposta. 
lado esquerdo da tela em "app > Http > Middleware" foi criado o Autenticador.php. o middleware só precisa de um método handle que recebe uma requisição que vamos receber, 
Request $request, e algo que vai ser executado, Closure $next. Esse next pode ser outro middleware , assim, podemos ter vários sendo executados ou pode ser a ação do controller, 
é o Laravel que vai cuidar dessa parte.

## Então, basicamente podemos inserir o que quisermos, podemos tratar a requisição antes e pegar a resposta e executar o que quiser antes de retornar também. 
Podemos tratar tanto a requisição quanto a resposta em um middleware

## então pra qual foi o motivo de ter criado o middleware, o caso, o que queremos é verificar se o usuário não está logado, 
então, !Auth::check() e lançar a exceção AuthenticationException(). Assim, se o usuário não estiver logado será redirecionado para a tela de login.

public function handle(Request $request, Closure $next)
{
    if (!Auth::check()) {
        throw new AuthenticationException();
    }

    return $next($request);
}

## observação
apos criar o middleware dever ser usando em algum lugar, e vamos passar a usar ele em um único lugar, por enquanto, sendo nas rotas, em "routes > web.php".
Exemplo:

Route::get('/', function () {
    return redirect('/series');
})->middleware(\App\Http\Middleware\Autenticador::class);

## Agora quando acessarmos "/series" na aplicação o autenticador não vai entrar em ação, mas quando acessar "/" ele vai entrar em ação e tentar redirecionar o usuário para a rota de login,


----------------------------------
04
----------------------------------

## criado a rota e a view login recebendo os dados vindo do form, criando o controler store no LoginCrontroller com o metod de index visualizar view login

## No corpo do método queremos tentar pegar o usuário e senha para fazermos um Auth::attempt(); perceba que ele espera por parâmetro credenciais do usuário. 
Assim, podemos passar o request->all(), vamos ver o que isso vai nos retornar incluindo um dd antes: dd(Auth::attempt($request->all()));, quando tentarmos realizar o 
login com o attempt passando o $request->all() é esperado receber um retorno falso, visto que ele retorna "verdadeiro" em caso de sucesso e "falso" em caso de erro.

   public function store(Request $request) 
    {
        dd(Auth::attempt($request->all()));
    }

criando a rota de post envio dos dados form login

## A princípio o código já está funcionando, repare o quanto é simples realizarmos login, é basicamente a chamada de um método attempt. De novo, estamos usando uma facade que fornece 
um subsistema para nós, no caso, de autenticação, então, esse attempt está realizando várias coisas por trás.
O attempt tenta buscar o usuário, se for encontrado vamos tentar efetuar o login dele, como vai ser feito o login verificando se a senha está correta com todos os hash, se a senha está 
correta e o usuário estiver válido, ele armazena o usuário em sessão. Se estiver armazenado em sessão, ao chegar no middleware de autenticador, o check vai retornar "verdadeiro".

----------------------------------
06
----------------------------------

## realizando o botao de cadastro ns view de login com href na rota users.create e desta rota ao respectivo controller e na model de Users
criado a view, rota, controler e metodo teoricamente o formulário está pronto,
 Agora na aplicação vamos atualizar e note que aparece os campos para preencher de "Nome", ""E-mail" e "Senha" com o botão "Registrar".
 The POST method is not supported for this route. Supported methods:Get,HEAD
Route::post('/register', [UsersController::class, 'store'])->name('users.store');
aqui nós deveríamos ter a validação, criar umform request separado, caso queira pode fazer um $request->valid direto, não vou adicionar validação, mas lembrem-se que isso é um problema, 
nós deveríamos validar.

Mas pegando todas as requisições $data = $request, só que tirando o token visto que não precisamos usar o token que vem da proteção de 
CSRF, ->except(['_token']);. 
poderíamos criar um user create com esses dados User::create($data)
Assim, 
em data ['password'] poderíamos muito bem fazer um password_hash da senha: $data['password'] = password_hash($data['password'], PASSWORD_DEFAULT); 
ou 
['password'] poderíamos muito bem fazer um password_hash da senha: $data['password'] = password_hash($request->password, PASSWORD_DEFAULT); 
com isso, já estaríamos protegidos. 
Mas, ao invés de usar as funções diretamente do PHP, vamos utilizar outra facade que é a de Hash::make. Existe essa facade de hash e o que ela faz por trás é usar as funções do PHP, adicionando algumas configurações. 
$data = $request->except(['_token']);
$data['password'] = Hash::make($data['password']);
User::create($data);
 Existe essa facade de hash e o que ela faz por trás é usar as funções do PHP, adicionando algumas configurações. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
================================================================================================================================================================================
mod 05

# Restringimos acesso a detalhes da view apenas a usuários logados
# Vimos como agrupar nossas rotas
# Conhecemos e instalamos o Breeze

-----------------------------------------------------------------------------------------------------------------------------------

##  aprender formas diferentes de aplicar um middleware nas URLs, ->middleware(\App\Http\Middleware\Autenticador::class);, seja através do controller, de um grupo de rotas ou agrupando de outras formas
## algunas vies não podem ser acessadas se não efetuar o login, como outras podem ser acessadas mas com limitição de acesso aos componentes dos botões.
## como limitar o acesso de rotas como: http://localhost:8001/seasons/53/episodes
uma das forma é inserir o middleware em cada rota
Route::get('/seasons/{season}/episodes', [EpisodesController::class, 'index'])->name('episodes.index')->middleware(\App\Http\Middleware\Autenticador::class);

## Só que existe outra forma de definir a utilização de um middleware, que é no controller em "app > Http > Controllers >SeriesController", dentro no controller se queremos aplicar um middleware a todos os métodos desse controller, 
podemos usar o método middleware, então utilizando o autenticador todos os métodos desse controller vão antes passar por esse middleware, $this->middleware(Autenticador::class);.

public function __construct(private SeriesRepository $repository)
{
    $this->middleware(Autenticador::class)->except('index');
}

## vamos passar o autenticador e agrupar todas essas rotas dentro da função, que vamos passar todas as definições de rotas que queremos que faça parte desse middleware.

Route::middleware('autenticador')->group(function() {

    Route::get('/', function () {
        return redirect('/series');
    });

    Route::get('/series/{series}/seasons', [SeasonsController::class, 'index'])->name('seasons.index');

    Route::get('/seasons/{season}/episodes', [EpisodesController::class, 'index'])->name('episodes.index');
    Route::post('/seasons/{season}/episodes', [EpisodesController::class, 'update'])->name('episodes.update');


});

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
